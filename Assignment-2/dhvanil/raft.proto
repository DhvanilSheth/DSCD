syntax = "proto3";

package raft;

// Defining the Raft Services
service Raft {
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {}
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {}
    rpc ServeClient(ServeClientArgs) returns (ServeClientReply) {}
}

// Handling RPC 1. RequestVote
message RequestVoteArgs {
    int32 term = 1 ;
    int32 candidate_id = 2 ;
    int32 last_log_index = 3 ;
    int32 last_log_term = 4 ;
}

message RequestVoteReply {
    int32 term = 1 ;
    bool vote_granted = 2 ;
    double old_leader_lease_timeout = 3 ;
}

// Handling RPC 2. AppendEntries

// Log entry to be used in AppendEntries RPC
message LogEntry {
    string operation = 1 ;
    string key = 2 ;
    string value = 3 ;
    int32 term = 4 ;
}

message AppendEntriesArgs {
    int32 term = 1 ;
    int32 leader_id = 2 ;
    int32 prev_log_index = 3 ;
    int32 prev_log_term = 4 ;
    repeated LogEntry entries = 5 ;
    int32 leader_commit = 6 ;
    double lease_duration = 7 ;
}

message AppendEntriesReply {
    int32 term = 1 ;
    bool success = 2 ;
    int32 ack = 3 ;
}

// Handling RPC 3. Serving client
message ServeClientArgs {
    string Request = 1 ;
}

message ServeClientReply {
    string Data = 1 ;
    string LeaderID = 2 ;
    bool Success = 3 ;
}

//  python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. raft.proto 