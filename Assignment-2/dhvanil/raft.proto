syntax = "proto3";

package raft;

// The service definition for the Raft protocol.
service Raft {
    // RPCs for Raft consensus
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {}
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {}
    rpc ServeClient(ServeClientArgs) returns (ServeClientReply) {}
}

// Log entry structure used in AppendEntries
message LogEntry {
    string operation = 1; // e.g., "SET" or "NO-OP"
    string key = 2; // Key in the key-value store
    string value = 3; // Value in the key-value store
    int32 term = 4; // Term number
}

// Arguments for RequestVote RPC
message RequestVoteArgs {
    int32 term = 1; // Candidate’s term
    int32 candidate_id = 2; // Candidate requesting vote
    int32 last_log_index = 3; // Index of candidate’s last log entry
    int32 last_log_term = 4; // Term of candidate’s last log entry
}

// Reply for RequestVote RPC
message RequestVoteReply {
    int32 term = 1; // Current term, for candidate to update itself
    bool vote_granted = 2; // True means candidate received vote
    double old_leader_lease_timeout = 3; // Timeout value for old leader's lease
}

// Arguments for AppendEntries RPC
message AppendEntriesArgs {
    int32 term = 1; // Leader’s term
    int32 leader_id = 2; // So follower can redirect clients
    int32 prev_log_index = 3; // Index of log entry immediately preceding new ones
    int32 prev_log_term = 4; // Term of prevLogIndex entry
    repeated LogEntry entries = 5; // Log entries to store (empty for heartbeat; may send more than one for efficiency)
    int32 leader_commit = 6; // Leader’s commitIndex
    double lease_duration = 7; // Leader lease duration
}

// Reply for AppendEntries RPC
message AppendEntriesReply {
    int32 term = 1; // Current term, for leader to update itself
    bool success = 2; // True if follower contained entry matching prevLogIndex and prevLogTerm
    int32 ack = 3; // The highest log index known to be replicated
}

// Arguments for ServeClient RPC
message ServeClientArgs {
    string Request = 1; // Client request (e.g., "GET key" or "SET key value")
}

// Reply for ServeClient RPC
message ServeClientReply {
    string Data = 1; // The value retrieved or empty
    string LeaderID = 2; // The ID of the leader node
    bool Success = 3; // True if the operation was successful
}

//  python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. raft.proto 