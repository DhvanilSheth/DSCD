syntax = "proto3";

package raft;

// The Raft Service definition.
service Raft {
  // Invoked by candidates to gather votes.
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // Invoked by leader to replicate log entries; also used as heartbeat.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // Additional RPCs for your cluster operations.
  rpc Suspend(PeriodMessage) returns (EmptyMessage);
  rpc GetLeader(EmptyMessage) returns (LeaderMessage);
  rpc SetVal(KeyValMessage) returns (SuccessMessage);
  rpc GetVal(KeyMessage) returns (SuccessValMessage);
  rpc GetStatus(EmptyMessage) returns (EmptyMessage);
}

// Message for requesting votes with leader's known lease duration.
message RequestVoteRequest {
  int32 term = 1;
  int32 candidateId = 2;
  int32 lastLogIndex = 3;
  int32 lastLogTerm = 4;
  int32 knownLeaderLeaseDuration = 5; // Duration of the old leader's lease known to this voter.
}

// Response to RequestVoteRequest.
message RequestVoteResponse {
  int32 term = 1;
  bool voteGranted = 2;
}

// Message for appending entries with the leader lease duration.
message AppendEntriesRequest {
  int32 term = 1;
  int32 leaderId = 2;
  int32 prevLogIndex = 3;
  int32 prevLogTerm = 4;
  repeated LogEntry entries = 5;
  int32 leaderCommit = 6;
  int32 leaderLeaseDuration = 7; // Duration of leader's lease for read operations.
}

// Response to AppendEntriesRequest.
message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

// Log entry structure.
message LogEntry {
  int32 term = 1; // Term when entry was received by the leader.
  string key = 2; // Key in the key-value store.
  string value = 3; // Value in the key-value store.
}

// Additional messages for key-value operations and leader status.
message KeyValMessage {
  string key = 1;
  string value = 2;
}

message SuccessMessage {
  bool success = 1;
}

message KeyMessage {
  string key = 1;
}

message SuccessValMessage {
  bool success = 1;
  string value = 2;
}

message PeriodMessage {
  int32 period = 1;
}

message EmptyMessage {}

message LeaderMessage {
  int32 leader = 1;
  string address = 2;
}
