syntax = "proto3";

package shopping;

// The item categories
enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
    ANY = 3;
}

// Message to represent an item
message Item {
    int32 id = 1;
    string name = 2;
    Category category = 3;
    string description = 4;
    int32 quantity = 5;
    float price = 6;
    float rating = 7;
    string seller_address = 8;
}

// Messages for Seller actions
message RegisterSellerRequest {
    string address = 1;
    string uuid = 2;
}

message SellerActionResponse {
    string message = 1;
    int32 item_id = 2; // Used for SellItem to return the unique item id
}

message ItemActionRequest {
    int32 item_id = 1;
    string seller_address = 2;
    string uuid = 3;
    float price = 4; // For UpdateItem
    int32 quantity = 5; // For UpdateItem
}

// Messages for Buyer actions
message SearchItemRequest {
    string name = 1;
    Category category = 2;
}

message BuyItemRequest {
    int32 item_id = 1;
    int32 quantity = 2;
    string buyer_address = 3;
}

message WishListRequest {
    int32 item_id = 1;
    string buyer_address = 2;
}

message RateItemRequest {
    int32 item_id = 1;
    int32 rating = 2; // Should be from 1 to 5
    string buyer_address = 3;
}

// The service definition for the Market
service Market {
    rpc RegisterSeller(RegisterSellerRequest) returns (SellerActionResponse);
    rpc SellItem(Item) returns (SellerActionResponse);
    rpc UpdateItem(ItemActionRequest) returns (SellerActionResponse);
    rpc DeleteItem(ItemActionRequest) returns (SellerActionResponse);
    rpc DisplaySellerItems(ItemActionRequest) returns (stream Item);
    rpc SearchItem(SearchItemRequest) returns (stream Item);
    rpc BuyItem(BuyItemRequest) returns (SellerActionResponse);
    rpc AddToWishList(WishListRequest) returns (SellerActionResponse);
    rpc RateItem(RateItemRequest) returns (SellerActionResponse);
}
